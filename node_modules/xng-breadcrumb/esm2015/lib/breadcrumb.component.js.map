{"version":3,"file":"breadcrumb.component.js","sourceRoot":"ng://xng-breadcrumb/","sources":["lib/breadcrumb.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAU,WAAW,EAAE,iBAAiB,EAAqB,MAAM,eAAe,CAAC;AAE1H,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;AACtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AASzD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAyD9B,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QApDhD,eAAU,GAAG,GAAG,CAAC;QAYzB;;;WAGG;QACM,iBAAY,GAAG,IAAI,CAAC;QAE7B;;WAEG;QACM,wBAAmB,GAAG,IAAI,CAAC;QAEpC;;;WAGG;QACM,UAAK,GAAG,EAAE,CAAC;IAyBuC,CAAC;IAvB5D;;;;;;;;OAQG;IAEH,IAAI,SAAS,CAAC,KAAiC;QAC7C,IAAI,KAAK,YAAY,WAAW,EAAE;YAChC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;YACnC,IAAI,CAAC,UAAU,GAAG,KAAK,IAAI,GAAG,CAAC;SAChC;IACH,CAAC;IACD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAID,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;YAC9E,IAAI,CAAC,WAAW,GAAG,WAAW;iBAC3B,GAAG,CAAC,UAAU,CAAC,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;oBAC7B,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3D;gBACD,OAAO,UAAU,CAAC;YACpB,CAAC,CAAC;iBACD,MAAM,CAAC,UAAU,CAAC,EAAE;gBACnB,iGAAiG;gBACjG,uEAAuE;gBACvE,IAAI,IAAI,CAAC,YAAY,EAAE;oBACrB,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IACD,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;CACF,CAAA;;YAxBwC,iBAAiB;;AA1CqB;IAA5E,YAAY,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;;yDAAc;AAMjF;IAAR,KAAK,EAAE;;yDAAqB;AAKpB;IAAR,KAAK,EAAE;;gEAA4B;AAM3B;IAAR,KAAK,EAAE;;kDAAY;AAYpB;IADC,KAAK,CAAC,WAAW,CAAC;;;oDASlB;AApDU,mBAAmB;IAN/B,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,6mDAA0C;QAE1C,aAAa,EAAE,iBAAiB,CAAC,IAAI;;KACtC,CAAC;qCA0DuC,iBAAiB;GAzD7C,mBAAmB,CAiF/B;SAjFY,mBAAmB","sourcesContent":["import { Component, ContentChild, Input, OnInit, TemplateRef, ViewEncapsulation, OnDestroy, Output } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbService } from './breadcrumb.service';\nimport { Breadcrumb } from './breadcrumb';\n\n@Component({\n  selector: 'xng-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BreadcrumbComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n  breadcrumbs: Breadcrumb[];\n  breadcrumbs$: Observable<Breadcrumb[]>;\n  separatorTemplate: TemplateRef<void>;\n  private _separator = '/';\n\n  /**\n   * Breadcrumb item can be customized with this template\n   * Template context is provided label, additional info, first and last indexes\n   * Use cases:\n   * 1) Add an icon along with label\n   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\n   * 3) Change text case {{breadcrumb | titlecase}}\n   */\n  @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef }) itemTemplate;\n\n  /**\n   * If true, breadcrumb is auto generated even without any mapping label\n   * Default label is same as route segment\n   */\n  @Input() autoGenerate = true;\n\n  /**\n   * By default query params will be preserved with breadcrumbs\n   */\n  @Input() preserveQueryParams = true;\n\n  /**\n   * custom class provided by consumer to increase specificity\n   * This will benefit to override styles that are conflicting\n   */\n  @Input() class = '';\n\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n  @Input('separator')\n  set separator(value: string | TemplateRef<void>) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n  get separator() {\n    return this._separator;\n  }\n\n  constructor(private breadcrumbService: BreadcrumbService) {}\n\n  ngOnInit() {\n    this.subscription = this.breadcrumbService.breadcrumbs$.subscribe(breadcrumbs => {\n      this.breadcrumbs = breadcrumbs\n        .map(breadcrumb => {\n          if (!this.preserveQueryParams) {\n            breadcrumb.routeLink = breadcrumb.routeLink.split('?')[0];\n          }\n          return breadcrumb;\n        })\n        .filter(breadcrumb => {\n          // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n          // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n          if (this.autoGenerate) {\n            return true;\n          }\n          return !breadcrumb.isAutoGeneratedLabel;\n        });\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n"]}