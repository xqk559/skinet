{"version":3,"file":"xng-breadcrumb.js","sources":["ng://xng-breadcrumb/lib/breadcrumb-item.directive.ts","ng://xng-breadcrumb/lib/breadcrumb.service.ts","ng://xng-breadcrumb/lib/breadcrumb.component.ts","ng://xng-breadcrumb/lib/breadcrumb.module.ts","ng://xng-breadcrumb/index.ts","ng://xng-breadcrumb/xng-breadcrumb.ts"],"sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to demo app.component.html\n */\n@Directive({\n  selector: '[xngBreadcrumbItem]'\n})\nexport class BreadcrumbItemDirective {\n  constructor() {}\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { Breadcrumb } from './breadcrumb';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreadcrumbService {\n  /**\n   * breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n   */\n  private baseBreadcrumb: Breadcrumb;\n\n  private baseHref = '/';\n\n  /**\n   * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n   * Breadcrumbs can be set from anywhere (component, service) in the app.\n   * On every breadcrumb update check this store and use the info if available.\n   */\n  private dynamicBreadcrumbStore: Breadcrumb[] = [];\n\n  /**\n   * breadcrumbList for the current route\n   * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n   * If effected, update the change and emit a new stream\n   */\n  private currentBreadcrumbs: Breadcrumb[] = [];\n  private previousBreadcrumbs: Breadcrumb[] = [];\n\n  /**\n   * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n   * Emits on every route change OR dynamic update of breadcrumb\n   */\n  private breadcrumbs = new BehaviorSubject<Breadcrumb[]>([]);\n  public breadcrumbs$ = this.breadcrumbs.asObservable();\n\n  private pathParamPrefix = ':';\n  private pathParamRegexIdentifier = '/:[^/]+';\n  private pathParamRegexReplacer = '/[^/]+';\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    this.setBaseBreadcrumb();\n    this.detectRouteChanges();\n  }\n\n  /**\n   * Update breadcrumb label or options for -\n   *\n   * route (complete route path). route can be passed the same way you define angular routes\n   * 1) update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * 2) change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * 3) add info Ex: set('/mentor/:id/edit', { info: { icon: 'edit', iconColor: 'blue' } })\n   * ------------------------ OR -------------------------\n   *\n   * alias (prefixed with '@'). breadcrumb alias is unique for a route\n   * 1) update label Ex: set('@mentor', 'Enabler')\n   * 2) change visibility Ex: set('@mentorEdit', { skip: true })\n   * 3) add info Ex: set('@mentorEdit', { info: { icon: 'edit', iconColor: 'blue' } })\n   */\n  set(pathOrAlias: string, breadcrumb: string | Breadcrumb) {\n    if (!this.validateArguments(pathOrAlias, breadcrumb)) {\n      return;\n    }\n\n    if (typeof breadcrumb === 'string') {\n      breadcrumb = {\n        label: breadcrumb\n      };\n    }\n\n    if (pathOrAlias.startsWith('@')) {\n      this.updateStore({ ...breadcrumb, alias: pathOrAlias.slice(1) });\n    } else {\n      const breadcrumbExtraProps = this.buildRouteRegExp(pathOrAlias);\n      this.updateStore({ ...breadcrumb, ...breadcrumbExtraProps });\n    }\n  }\n\n  private setBaseBreadcrumb() {\n    const baseConfig = this.router.config.find(pathConfig => pathConfig.path === '');\n    if (baseConfig && baseConfig.data) {\n      // tslint:disable-next-line: prefer-const\n      let { label, alias, skip = false, info, disable = false } = this.getBreadcrumbOptions(baseConfig.data);\n\n      let isAutoGeneratedLabel = false;\n      if (typeof label !== 'string' && !label) {\n        label = '';\n        isAutoGeneratedLabel = true;\n      }\n\n      this.baseBreadcrumb = {\n        label,\n        alias,\n        skip,\n        disable,\n        info,\n        routeLink: this.baseHref,\n        isAutoGeneratedLabel\n      };\n    }\n  }\n\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n  private detectRouteChanges() {\n    this.router.events\n      .pipe(\n        filter(event => event instanceof NavigationEnd),\n        distinctUntilChanged()\n      )\n      .subscribe(event => {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n\n        this.currentBreadcrumbs = this.baseBreadcrumb ? [this.baseBreadcrumb] : [];\n        this.prepareBreadcrumbList(this.activatedRoute.root, this.baseHref);\n      });\n  }\n\n  private prepareBreadcrumbList(activatedRoute: ActivatedRoute, routeLinkPrefix: string): Breadcrumb[] {\n    if (activatedRoute.routeConfig && activatedRoute.routeConfig.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(activatedRoute, routeLinkPrefix);\n      this.currentBreadcrumbs.push(breadcrumbItem);\n\n      if (activatedRoute.firstChild) {\n        return this.prepareBreadcrumbList(activatedRoute.firstChild, breadcrumbItem.routeLink + '/');\n      }\n    } else if (activatedRoute.firstChild) {\n      return this.prepareBreadcrumbList(activatedRoute.firstChild, routeLinkPrefix);\n    }\n    const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n    this.resolveQueryParamForLastItem(lastCrumb, activatedRoute);\n\n    // remove breadcrumb items that needs to be hidden or don't have a label\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n\n  private prepareBreadcrumbItem(activatedRoute: ActivatedRoute, routeLinkPrefix: string): Breadcrumb {\n    const { path, breadcrumb } = this.parseRouteData(activatedRoute.routeConfig);\n\n    // in case of path param get the resolved for param\n    const resolvedPath = this.resolvePathParam(path, activatedRoute);\n    const routeLink = `${routeLinkPrefix}${resolvedPath}`;\n\n    // tslint:disable-next-line: prefer-const\n    let { label, alias, skip, disable, info } = this.getFromStore(breadcrumb.alias, routeLink);\n    let isAutoGeneratedLabel = false;\n\n    if (typeof label !== 'string') {\n      if (typeof breadcrumb.label === 'string') {\n        label = breadcrumb.label;\n      } else {\n        label = resolvedPath;\n        isAutoGeneratedLabel = true;\n      }\n    }\n\n    return {\n      label,\n      alias: alias || breadcrumb.alias,\n      skip: skip || breadcrumb.skip,\n      disable: disable || breadcrumb.disable,\n      info: info || breadcrumb.info,\n      routeLink,\n      isAutoGeneratedLabel,\n      ...this.resolveQueryParam(routeLink)\n    };\n  }\n\n  /**\n   * For a specific route, breadcrumb can be defined either on parent data OR it's child(which has empty path) data\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n  private parseRouteData(routeConfig) {\n    const { path, data = {} } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(routeConfig, { ...data });\n\n    return { path, breadcrumb };\n  }\n\n  private getFromStore(breadcrumbAlias: string, routeLink: string): Breadcrumb {\n    let matchingItem;\n    if (breadcrumbAlias) {\n      matchingItem = this.dynamicBreadcrumbStore.find(item => item.alias === breadcrumbAlias);\n    }\n\n    if (!matchingItem && routeLink) {\n      matchingItem = this.dynamicBreadcrumbStore.find(item => {\n        return (item.routeLink && item.routeLink === routeLink) || (item.routeRegex && new RegExp(item.routeRegex).test(routeLink + '/'));\n      });\n    }\n\n    return matchingItem || {};\n  }\n\n  /**\n   * To update breadcrumb label for a route with path param, we need regex that matches route.\n   * Instead of user providing regex, we help in preparing regex dynamically\n   *\n   * Ex: route declaration - path: '/mentor/:id'\n   * breadcrumbService.set('/mentor/:id', 'Uday');\n   * '/mentor/2' OR 'mentor/ada' we should use 'Uday' as label\n   *\n   * regex string is built, if route has path params(contains with ':')\n   */\n  private buildRouteRegExp(path) {\n    // ensure leading slash is provided in the path\n    if (!path.startsWith('/')) {\n      path = '/' + path;\n    }\n\n    if (path.includes(this.pathParamPrefix)) {\n      // replace mathing path param with a regex\n      // '/mentor/:id' becomes '/mentor/[^/]', which further will be matched in updateStore\n      const routeRegex = path.replace(new RegExp(this.pathParamRegexIdentifier, 'g'), this.pathParamRegexReplacer);\n      return { routeRegex };\n    } else {\n      return { routeLink: path };\n    }\n  }\n\n  /**\n   * Update current breadcrumb definition and emit a new stream of breadcrumbs\n   * Also update the store to reuse dynamic declarations\n   */\n  private updateStore(breadcrumb) {\n    const { breadcrumbItemIndex, storeItemIndex } = this.getBreadcrumbIndexes(breadcrumb);\n\n    // if breadcrumb is present in current breadcrumbs update it and emit new stream\n    if (breadcrumbItemIndex > -1) {\n      this.currentBreadcrumbs[breadcrumbItemIndex] = { ...this.currentBreadcrumbs[breadcrumbItemIndex], ...breadcrumb };\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n\n    // If the store already has this route definition update it, else add\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = { ...this.dynamicBreadcrumbStore[storeItemIndex], ...breadcrumb };\n    } else {\n      this.dynamicBreadcrumbStore.push(breadcrumb);\n    }\n  }\n\n  private getBreadcrumbIndexes(breadcrumb): any {\n    const { alias, routeLink, routeRegex } = breadcrumb;\n    let indexMap = {};\n    // identify macthing breadcrumb and store item\n    if (alias) {\n      indexMap = this.getBreadcrumbIndexesByType('alias', alias);\n    } else if (routeLink) {\n      indexMap = this.getBreadcrumbIndexesByType('routeLink', routeLink);\n    } else if (routeRegex) {\n      indexMap = this.getBreadcrumbIndexesByType('routeRegex', routeRegex);\n    }\n    return indexMap;\n  }\n\n  private getBreadcrumbIndexesByType(key: string, value: string) {\n    let breadcrumbItemIndex: number;\n    if (key !== 'routeRegex') {\n      breadcrumbItemIndex = this.currentBreadcrumbs.findIndex(item => value === item[key]);\n    } else {\n      breadcrumbItemIndex = this.currentBreadcrumbs.findIndex(item => new RegExp(value).test(item.routeLink));\n    }\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex(item => value === item[key]);\n\n    return { breadcrumbItemIndex, storeItemIndex };\n  }\n\n  private resolvePathParam(path: string, activatedRoute: ActivatedRoute) {\n    // if the path segment is a route param, read the param value from url\n    if (path.includes(this.pathParamPrefix)) {\n      Object.entries(activatedRoute.snapshot.params).forEach(([key, value]) => {\n        path = path.replace(`:${key}`, `${value}`);\n      })\n    }\n    return path;\n  }\n\n  private resolveQueryParam(routeLink: string): Breadcrumb {\n    const previousBreadcrumb = this.previousBreadcrumbs.find(item => item.routeLink === routeLink) || {};\n    return {\n      queryParams: previousBreadcrumb.queryParams,\n      fragment: previousBreadcrumb.fragment\n    };\n  }\n\n  private resolveQueryParamForLastItem(lastItem: Breadcrumb, activatedRoute: ActivatedRoute) {\n    const { queryParams, fragment } = activatedRoute.snapshot;\n    // For last item in the crumbs set queryParams from activatedRoute\n    if(lastItem){\n      lastItem.queryParams = Object.keys(queryParams).length > 0 ? { ...queryParams } : undefined;\n      lastItem.fragment = fragment\n    }\n  }\n\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data\n   * merge them both with child taking precedence\n   */\n  private mergeWithBaseChildData(routeConfig, data): Breadcrumb {\n    if (!routeConfig) {\n      return this.getBreadcrumbOptions(data);\n    }\n\n    let baseChild;\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedConfig.routes.find(route => route.path === '');\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find(route => route.path === '');\n    }\n\n    return baseChild && baseChild.data\n      ? this.mergeWithBaseChildData(baseChild, {\n        ...this.getBreadcrumbOptions(data),\n        ...this.getBreadcrumbOptions(baseChild.data)\n      })\n      : this.getBreadcrumbOptions(data);\n  }\n\n  private validateArguments(pathOrAlias, breadcrumb) {\n    if (pathOrAlias === null || pathOrAlias === undefined) {\n      console.error('Invalid first argument. Please pass a route path or a breadcrumb alias.');\n      return false;\n    } else if (breadcrumb === null || breadcrumb === undefined) {\n      console.error('Invalid second argument. Please pass a string or an Object with breadcrumb options.');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * breadcrumb can be passed a label or an options object\n   * If passed as a string convert to breadcrumb options object\n   */\n  private getBreadcrumbOptions(data) {\n    let { breadcrumb } = data;\n    if (typeof breadcrumb === 'string' || !breadcrumb) {\n      breadcrumb = {\n        label: breadcrumb\n      };\n    }\n    return breadcrumb;\n  }\n}\n","import { Component, ContentChild, Input, OnInit, TemplateRef, ViewEncapsulation, OnDestroy, Output } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbService } from './breadcrumb.service';\nimport { Breadcrumb } from './breadcrumb';\n\n@Component({\n  selector: 'xng-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BreadcrumbComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n  breadcrumbs: Breadcrumb[];\n  breadcrumbs$: Observable<Breadcrumb[]>;\n  separatorTemplate: TemplateRef<void>;\n  private _separator = '/';\n\n  /**\n   * Breadcrumb item can be customized with this template\n   * Template context is provided label, additional info, first and last indexes\n   * Use cases:\n   * 1) Add an icon along with label\n   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\n   * 3) Change text case {{breadcrumb | titlecase}}\n   */\n  @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef }) itemTemplate;\n\n  /**\n   * If true, breadcrumb is auto generated even without any mapping label\n   * Default label is same as route segment\n   */\n  @Input() autoGenerate = true;\n\n  /**\n   * By default query params will be preserved with breadcrumbs\n   */\n  @Input() preserveQueryParams = true;\n\n  /**\n   * custom class provided by consumer to increase specificity\n   * This will benefit to override styles that are conflicting\n   */\n  @Input() class = '';\n\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n  @Input('separator')\n  set separator(value: string | TemplateRef<void>) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n  get separator() {\n    return this._separator;\n  }\n\n  constructor(private breadcrumbService: BreadcrumbService) {}\n\n  ngOnInit() {\n    this.subscription = this.breadcrumbService.breadcrumbs$.subscribe(breadcrumbs => {\n      this.breadcrumbs = breadcrumbs\n        .map(breadcrumb => {\n          if (!this.preserveQueryParams) {\n            breadcrumb.routeLink = breadcrumb.routeLink.split('?')[0];\n          }\n          return breadcrumb;\n        })\n        .filter(breadcrumb => {\n          // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n          // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n          if (this.autoGenerate) {\n            return true;\n          }\n          return !breadcrumb.isAutoGeneratedLabel;\n        });\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n  imports: [CommonModule, RouterModule],\n  exports: [BreadcrumbComponent, BreadcrumbItemDirective]\n})\nexport class BreadcrumbModule {}\n","/*\n * Public API Surface of xng-breadcrumb\n */\n\nexport * from './lib/breadcrumb-item.directive';\nexport * from './lib/breadcrumb.component';\nexport * from './lib/breadcrumb.module';\nexport * from './lib/breadcrumb.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}